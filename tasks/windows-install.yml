
# validation

- name: assert all vars are set
  assert: { that: "{{ item }} != '' " }
  with_items:
  - temp_folder
  - installation_folder
  - clear_temp_folder
  - clear_before_install
  - server_port
  - installer_file_name
  - s3_download_url
  - extra_java_options
  - launcher_file_name
  - kill_notepad

# required dependencies


# set temp folder

- name: make sure temp folder exists
  win_file:
    path: "{{ temp_folder }}"
    state: directory

# download the file

- name: download from internet
  block:

    - name: download from s3 url
      win_get_url:
        url: "{{ s3_download_url }}"
        dest: "{{ temp_folder }}\\{{ installer_file_name }}"
        timeout: "{{ download_timeout | default(60) }}"
        force: no
        use_proxy: "{{ download_use_proxy | default('no') }}"
      when: custom_download_url == ""
    
    - name: download from custom url
      win_get_url:
        url: "{{ custom_download_url }}"
        dest: "{{ temp_folder }}\\{{ installer_file_name }}"
        timeout: "{{ download_timeout | default(60) }}"
        force: no
        force_basic_auth: yes
        url_username: "{{ custom_download_username }}"
        url_password: "{{ custom_download_password }}"
        use_proxy: "{{ download_use_proxy | default('no') }}"
      when: custom_download_url != ""

  when: deployment_mode == "online"

- name: download from shared storage folder
  copy:
    src: "{{ shared_storage_folder }}/{{ relative_path }}/{{ installer_file_name }}"
    dest: "{{ temp_folder }}/{{ installer_file_name }}"
    remote_src: no
  when: deployment_mode == "offline"


# copy var file

- name: copy var file
  win_template:
    src: agent.varfile.j2
    dest: "{{ temp_folder }}\\{{ (installer_file_name | splitext)[0] }}.varfile"

# external proxy

- name: add external proxy
  win_lineinfile:
    path: "{{ temp_folder }}\\{{ (installer_file_name | splitext)[0] }}.varfile"
    line: "{{ item }}"
    regexp: "^{{ item }}"
  with_items:
    - externalProxyHost={{ external_proxy_host | default('localhost') }}
    - externalProxyPort={{ external_proxy_port | default('8080') }}
    - externalProxyUser={{ external_proxy_user | default('') }}
    - externalProxyPassword={{ external_proxy_password | default('') }}
  become: yes
  when: use_external_proxy == True


# stop old service

- name: kill the old selenium agent server
  win_shell: |
    taskkill /F /IM selenium_agent_server.exe
  register: killseleniumresults
  changed_when: killseleniumresults.rc == 0 and 'The process "selenium_agent_server.exe" not found.' not in killseleniumresults.stderr
  failed_when: killseleniumresults.rc != 0 and 'The process "selenium_agent_server.exe" not found.' not in killseleniumresults.stderr
  become: yes

- name: kill the old selenium grid nodes
  win_shell: |
    taskkill /F /IM selenium_grid_node.exe
  register: killgridresults
  changed_when: killgridresults.rc == 0 and 'The process "selenium_grid_node.exe" not found.' not in killgridresults.stderr
  failed_when: killgridresults.rc != 0 and 'The process "selenium_grid_node.exe" not found.' not in killgridresults.stderr
  become: yes

# kill notepadd

- name: kill notepad apps
  block:
    - name: kill notepad
      win_shell: |
        taskkill /F /IM notepad.exe
      register: killnotepad
      changed_when: killnotepad.rc == 0 and 'The process "notepad.exe" not found.' not in killnotepad.stderr
      failed_when: killnotepad.rc != 0 and 'The process "notepad.exe" not found.' not in killnotepad.stderr
      become: yes

    - name: kill notepad++
      win_shell: |
        taskkill /F /IM notepad++.exe
      register: killnotepadplusplus
      changed_when: killnotepadplusplus.rc == 0 and 'The process "notepad++.exe" not found.' not in killnotepadplusplus.stderr
      failed_when: killnotepadplusplus.rc != 0 and 'The process "notepad++.exe" not found.' not in killnotepadplusplus.stderr
      become: yes

  when: kill_notepad == True
  ignore_errors: yes

# delete old installation (optional)

- name: clear old installation folder
  win_file: 
    path: "{{ installation_folder }}"
    state: absent
  when: clear_before_install == True

# unpack all the files and run the installer

- name: make sure installation folder exists
  win_file:
    path: "{{ installation_folder }}"
    state: directory
  become: yes

- name: run the installer
  win_command: "{{ temp_folder }}\\{{ installer_file_name }} -q -wait 300"
  async: 300
  poll: 0
  register: installer_sync
  become: yes

- name: wait for installer
  async_status:
    jid: "{{ installer_sync.ansible_job_id }}"
  register: wait_for_installer
  until: wait_for_installer.finished
  retries: 30
  delay: 10
  become: yes

- name: fail when error is not disconnection
  fail:
    msg: "unrecognized error {{ wait_for_installer.msg }}"
  when:
    - wait_for_installer is failed
#    - wait_for_installer.msg != 'Unexpected failure during module execution.'

- name: make sure machine is reachable
  wait_for_connection:
    delay: 0
    sleep: 2
    connect_timeout: 5
    timeout: 60

# configure installed

- name: update application properties file
  win_lineinfile:
    path: "{{ installation_folder }}\\config\\application.properties"
    line: "{{ item.key }}={{ item.value }}"
    regexp: "^{{ item.key | replace('.', '\\.') }}="
  with_dict: "{{ application_properties }}"
  become: yes

- name: update logback properties file
  win_lineinfile:
    path: "{{ installation_folder }}\\config\\logback.properties"
    line: "{{ item.key }}={{ item.value }}"
    regexp: "^{{ item.key | replace('.', '\\.') }}="
  with_dict: "{{ logback_properties }}"
  become: yes

- name: update vmoptions file
  win_lineinfile:
    path: "{{ installation_folder }}\\selenium_agent_server.vmoptions"
    line: "{{ item }}"
    regexp: "^{{ item }}"
  with_items: "{{ extra_java_options }}"
  become: yes

# enable selenium IE - protected mode

- name: run ie setup for selenium
  win_regmerge:
    path: "{{ installation_folder }}\\drivers\\ie_setup_for_selenium.reg"
  become: yes

# enable / disable proxy tunneling

- name: enable proxy tunneling if true
  win_regmerge:
    path: "{{ installation_folder }}\\bin\\proxy-enable.reg"
  become: yes
  when: enable_tunneling

- name: disable proxy tunneling if false
  win_regmerge:
    path: "{{ installation_folder }}\\bin\\proxy-disable.reg"
  become: yes
  when: not enable_tunneling

# reboot selenium agent

- name: reboot selenium agent
  win_reboot:
    reboot_timeout: "{{ reboot_timeout | default(600) }}"
  become: yes
  when: reboot_after_install == True

# notify handlers

- name: notify handlers
  win_shell: "echo notify handlers"
  notify:
    - start the service

# expose role output

- name: sanitize role name
  set_fact:
    sanitize_role_name: "{{ role_name | replace('-', '_') | regex_replace('([^A-Za-z0-9_])', '') | trim }}"

- name: expose role output
  set_fact:
    "{{ sanitize_role_name }}":
      server_port: "{{ server_port }}"
      installation_folder: "{{ installation_folder }}"
